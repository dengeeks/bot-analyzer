import io
import logging
from typing import Any, Optional

import pandas as pd
from aiogram.types import Message
from openpyxl.utils import get_column_letter

from bot.database.models.price_history import PriceHistory
from bot.database.models.product_link import ProductLink
from bot.keyboards.group import group_detail_keyboard
from bot.services.group import GroupService

logger = logging.getLogger(__name__)


async def _process_links(urls: pd.Series, group_id: int) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫"""
    created_count = 0
    for url in urls.dropna().unique():
        url = str(url).strip()
        if not url:
            continue

        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://satu.kz
        if not url.startswith('https://satu.kz'):
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ {url}: –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://satu.kz")
            continue

        try:
            await ProductLink.create(
                group_id = group_id,
                url = url,
                companyName = None,
                productName = None,
                last_price = None,
                last_check = None
            )
            created_count += 1
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑—É {url}: {e}")

    return created_count


async def _send_group_info(
        message: Message,
        group_id: int,
        site_id: int,
        additional_text: str = ""
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
    group = await GroupService.get_group(group_id)
    text = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if group.is_active else '–ù–µ—Ç'}\n\n"
        f"{additional_text}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –≥—Ä—É–ø–ø–æ–π:"
    )
    await message.answer(
        text,
        reply_markup = group_detail_keyboard(group_id, site_id, group.is_active)
    )


def _generate_group_info_text(group: Any, links_count: Optional[int] = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ"""
    base_text = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if group.is_active else '–ù–µ—Ç'}\n\n"
    )

    if links_count is not None:
        base_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {links_count}.\n\n"

    return base_text


# async def generate_price_diff_excel(group_id: int) -> io.BytesIO:
#     """
#     –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω –≤—á–µ—Ä–∞/—Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–µ.
#     """
#     today = date.today()
#     yesterday = today - timedelta(days = 1)
#
#     start_today = datetime.combine(today, datetime.min.time())
#     end_today = datetime.combine(today, datetime.max.time())
#
#     start_yesterday = datetime.combine(yesterday, datetime.min.time())
#     end_yesterday = datetime.combine(yesterday, datetime.max.time())
#
#     links = await ProductLink.filter(group_id = group_id).all()
#     if not links:
#         return None
#
#     data_rows = []
#     for link in links:
#         yesterday_price_obj = await PriceHistory.filter(
#             product_link = link,
#             date__gte = start_yesterday,
#             date__lte = end_yesterday
#         ).order_by('-date').first()
#
#         today_price_obj = await PriceHistory.filter(
#             product_link = link,
#             date__gte = start_today,
#             date__lte = end_today
#         ).order_by('-date').first()
#
#         if not yesterday_price_obj or not today_price_obj:
#             continue
#
#         diff = today_price_obj.price - yesterday_price_obj.price
#         percent = round((diff / yesterday_price_obj.price * 100) if yesterday_price_obj.price else 0, 0)
#         sign = "üî∫" if diff > 0 else ("üîª" if diff < 0 else "‚ûñ")
#
#         data_rows.append(
#             {
#                 "–ö–æ–º–ø–∞–Ω–∏—è": link.companyName or "",
#                 "–¢–æ–≤–∞—Ä": link.productName or "",
#                 "–¶–µ–Ω–∞ –≤—á–µ—Ä–∞": yesterday_price_obj.price,
#                 "–¶–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è": today_price_obj.price,
#                 "–†–∞–∑–Ω–∏—Ü–∞": diff,
#                 "%": percent,
#                 "–°–∏–º–≤–æ–ª": sign,
#                 "–°—Å—ã–ª–∫–∞": link.url
#             }
#         )
#
#     if not data_rows:
#         return None
#
#     df = pd.DataFrame(data_rows)
#     output = io.BytesIO()
#     with pd.ExcelWriter(output, engine = "openpyxl") as writer:
#         df.to_excel(writer, index = False, sheet_name = "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω")
#         worksheet = writer.sheets["–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω"]
#
#         for col in worksheet.columns:
#             max_length = max((len(str(cell.value)) for cell in col), default = 10)
#             worksheet.column_dimensions[get_column_letter(col[0].column)].width = (max_length + 2) * 1.2
#
#     output.seek(0)
#     return output

async def generate_price_diff_excel(group_id: int) -> io.BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–æ–π
    –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–µ.
    """
    links = await ProductLink.filter(group_id = group_id).all()
    if not links:
        return None

    data_rows = []
    for link in links:
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Ü–µ–Ω—ã
        price_objs = await PriceHistory.filter(product_link = link).order_by('-date').limit(2)

        if len(price_objs) < 2:
            # –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            data_rows.append(
                {
                    "–ö–æ–º–ø–∞–Ω–∏—è": link.companyName or "",
                    "–¢–æ–≤–∞—Ä": link.productName or "",
                    "–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞": price_objs[0].price if price_objs else None,
                    "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞": None,
                    "–†–∞–∑–Ω–∏—Ü–∞": None,
                    "%": None,
                    "–°–∏–º–≤–æ–ª": "‚ÑπÔ∏è –î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ",
                    "–°—Å—ã–ª–∫–∞": link.url
                }
            )
            continue

        last_price = price_objs[0]
        prev_price = price_objs[1]

        diff = last_price.price - prev_price.price
        percent = (diff / prev_price.price * 100) if prev_price.price else 0
        sign = "üî∫" if diff > 0 else ("üîª" if diff < 0 else "‚ûñ")

        data_rows.append(
            {
                "–ö–æ–º–ø–∞–Ω–∏—è": link.companyName or "",
                "–¢–æ–≤–∞—Ä": link.productName or "",
                "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞": prev_price.price,
                "–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞": last_price.price,
                "–†–∞–∑–Ω–∏—Ü–∞": diff,
                "%": percent,
                "–°–∏–º–≤–æ–ª": sign,
                "–°—Å—ã–ª–∫–∞": link.url
            }
        )

    if not data_rows:
        return None

    df = pd.DataFrame(data_rows)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine = "openpyxl") as writer:
        df.to_excel(writer, index = False, sheet_name = "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω")
        worksheet = writer.sheets["–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω"]

        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in worksheet.columns:
            max_length = max((len(str(cell.value)) for cell in col), default = 10)
            worksheet.column_dimensions[get_column_letter(col[0].column)].width = (max_length + 2) * 1.2

    output.seek(0)
    return output

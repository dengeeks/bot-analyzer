import io
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, BufferedInputFile

from bot.database.models.product_link import ProductLink
from bot.filters.admin import AdminFilter
from bot.fsm.link import TableStates
from bot.keyboards.group import group_detail_keyboard
from bot.keyboards.link import confirm_delete_group_links_keyboard
from bot.services.group import GroupService, GroupHandler
from bot.services.link import LinkService, TableHandler
from bot.tasks.parse import parse_single_group
from bot.utils.callback import parse_callback
from bot.utils.link import _process_links, generate_price_diff_excel
from core.config import load_config

logger = logging.getLogger(__name__)

config = load_config()
admin_ids = config.tg_bot.admin_ids

router = Router()
router.message.filter(AdminFilter(admin_ids))


@router.callback_query(F.data.startswith("add_table_"))
async def add_table_start(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    _, _, group_id, site_id = callback.data.split("_")

    # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    await state.update_data(group_id = int(group_id), site_id = int(site_id))
    await state.set_state(TableStates.uploading_table)

    text = (
        "üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.xlsx` –∏–ª–∏ `.csv`.\n\n"
        "‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>`–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä`</b>.\n"
        "‚ö†Ô∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <b>`https://satu.kz/`</b>, –∏–Ω–∞—á–µ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–Ω—è—Ç—ã –∏ –Ω–µ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –≤ –ø–∞—Ä—Å–µ—Ä.\n"
        "‚ÑπÔ∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã ‚Äî –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ | –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä\n"
        "–¢–æ–≤–∞—Ä 1  | https://satu.kz/...\n"
        "–¢–æ–≤–∞—Ä 2  | https://satu.kz/..."
    )
    await callback.message.answer(text)
    await callback.answer()


@router.message(TableStates.uploading_table, F.document)
async def upload_table(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    data = await state.get_data()
    group_id = data["group_id"]
    site_id = data["site_id"]

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    group = await GroupService.get_group(int(group_id))

    try:
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        file_bytes = io.BytesIO()
        await message.bot.download(message.document.file_id, destination = file_bytes)
        file_bytes.seek(0)

        df = await TableHandler.validate_and_read_file(
            file_bytes,
            message.document.file_name
        )

        if "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä" not in df.columns:
            raise ValueError("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'")

        created_count = await _process_links(df["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"], group_id)

        parser_text = (
            "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
            if group.is_active else
            "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        )

        # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–µ(–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
        count_links = await LinkService.get_count_product_link_by_group_id(group_id = group_id)

        text = (
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {count_links}\n\n"

            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
            "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
            " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
            "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
            f"{parser_text}"
            "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
            "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
        )

        await message.answer(
            f'‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {created_count} —Å—Å—ã–ª–æ–∫',
        )
        await message.answer(
            text,
            reply_markup = group_detail_keyboard(group_id, site_id, group.is_active),

        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("view_table_"))
async def view_table(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
    _, _, group_id, site_id = callback.data.split("_")
    group_id, site_id = int(group_id), int(site_id)

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    group = await GroupService.get_group(group_id)
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≥—Ä—É–ø–ø—ã
    links = await ProductLink.filter(group_id = group_id).all()

    parser_text = (
        "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        if group.is_active else
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
    )

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–µ(–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    count_links = await LinkService.get_count_product_link_by_group_id(group_id = group_id)

    if not links:
        await callback.answer(
            "‚ÑπÔ∏è –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É¬ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏."
        )
        return

    links_data = [{
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": link.companyName,
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞": link.productName,
        "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": link.url
    } for link in links]

    excel_file = TableHandler.create_excel_with_autofit(links_data, group)

    text_table = '–í—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞'
    text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {count_links}\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
        "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
        " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"{parser_text}"
        "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    await callback.message.answer_document(excel_file, caption = text_table)

    await callback.message.answer(
        text,
        reply_markup = group_detail_keyboard(group.id, site_id, group.is_active)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_table_"))
async def delete_links(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≥—Ä—É–ø–ø—ã"""
    _, _, group_id, site_id = parse_callback(callback.data)
    group_id, site_id = int(group_id), int(site_id)

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    group = await GroupService.get_group(group_id)
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
    links_count = await ProductLink.filter(group_id = group_id).count()

    if not links_count:
        await callback.answer(
            "‚ÑπÔ∏è –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É¬ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏."
        )
        return

    text = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ</b>:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if group.is_active else '–ù–µ—Ç'}\n\n"
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ</b>: \n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {links_count} \n\n"
        f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã?</b>"
    )

    await callback.message.edit_text(
        text,
        reply_markup = confirm_delete_group_links_keyboard(group_id, site_id)
    )


@router.callback_query(F.data.startswith(("links_confirm_", "links_cancel_")))
async def process_delete_links_confirmation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"""
    parts = parse_callback(callback.data)
    group_id, site_id = int(parts[2]), int(parts[3])
    group = await GroupService.get_group(group_id)

    if callback.data.startswith("links_confirm_"):
        deleted_count = await LinkService.delete_links_by_group(group_id)
        await callback.answer(f"‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ ({deleted_count}) —É–¥–∞–ª–µ–Ω—ã!")
    else:
        await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    parser_text = (
        "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        if group.is_active else
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
    )

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–µ(–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    count_links = await LinkService.get_count_product_link_by_group_id(group_id = group_id)

    text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {count_links}\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
        "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
        " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"{parser_text}"
        "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    await callback.message.edit_text(
        text,
        reply_markup = group_detail_keyboard(group_id, site_id, group.is_active)
    )


@router.callback_query(F.data.startswith("start_parser_"))
async def start_parser_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    _, _, group_id, site_id = parse_callback(callback.data)
    group_id = int(group_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    group = await GroupService.update_parser_status(group_id, is_active = True)

    group = await GroupService.get_group(group_id)

    parser_text = (
        "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        if group.is_active else
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
    )

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–µ(–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    count_links = await LinkService.get_count_product_link_by_group_id(group_id = group_id)

    text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {count_links}\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
        "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
        " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"{parser_text}"
        "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.answer("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await callback.message.edit_text(
        text = text,
        reply_markup = group_detail_keyboard(
            group_id = group_id,
            site_id = int(site_id),
            is_parser_active = group.is_active
        )
    )


@router.callback_query(F.data.startswith("stop_parser_"))
async def stop_parser_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    _, _, group_id, site_id = parse_callback(callback.data)
    group_id = int(group_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    group = await GroupService.update_parser_status(group_id, is_active = False)

    group = await GroupService.get_group(group_id)

    parser_text = (
        "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        if group.is_active else
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
    )

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–µ(–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    count_links = await LinkService.get_count_product_link_by_group_id(group_id = group_id)

    text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {count_links}\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
        "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
        " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"{parser_text}"
        "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.answer("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await callback.message.edit_text(
        text = text,
        reply_markup = group_detail_keyboard(
            group_id = group_id,
            site_id = int(site_id),
            is_parser_active = group.is_active
        )
    )


@router.callback_query(F.data.startswith("force_start_"))
async def force_start_parser(callback: CallbackQuery):
    _, _, group_id, site_id = parse_callback(callback.data)
    group = await GroupService.get_group(int(group_id))

    links_count = await ProductLink.filter(group_id = group_id).count()

    if not links_count:
        await callback.answer("–í –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")
        return

    await callback.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...", show_alert = False)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
    await parse_single_group(group_id)

    parser_text = (
        "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        if group.is_active else
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
    )

    text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {links_count}\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
        "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
        " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"{parser_text}"
        "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    await callback.message.answer(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã {group.title} –∑–∞–≤–µ—Ä—à–µ–Ω")
    await callback.message.answer(
        text = text,
        reply_markup = group_detail_keyboard(
            group_id = group_id,
            site_id = int(site_id),
            is_parser_active = group.is_active
        )
    )


@router.callback_query(F.data.startswith("final_table_"))
async def view_table(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
    _, _, group_id, site_id = parse_callback(callback.data)
    group_id = int(group_id)

    group = await GroupService.get_group(group_id)
    links = await ProductLink.filter(group_id = group_id).all()

    if not links:
        await callback.answer("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω link —Å last_price != None
    has_prices = any(link.last_price is not None for link in links)

    if not has_prices:
        await callback.answer("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –µ—â—ë –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã.")
        return

    links_data = [{
        "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏": link.last_check.strftime("%d.%m.%Y"),
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": link.productName,
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏": link.companyName,
        "–°—Ç–æ–∏–º–æ—Å—Ç—å": link.last_price,
        "–°—Å—ã–ª–∫–∞": link.url
    } for link in links]

    excel_file = TableHandler.create_excel_with_autofit(links_data, group)

    text_table = "–í—ã—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"

    parser_text = (
        "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        if group.is_active else
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
    )

    links_count = await ProductLink.filter(group_id = group_id).count()

    text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {links_count}\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
        "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
        " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"{parser_text}"
        "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    await callback.message.answer_document(excel_file, caption = text_table)
    await callback.message.answer(
        text,
        reply_markup = group_detail_keyboard(group.id, site_id, group.is_active)
    )


@router.callback_query(F.data.startswith("price_analysis_"))
async def price_analysis(callback: CallbackQuery):
    _, _, group_id, site_id = parse_callback(callback.data)
    group_id = int(group_id)
    site_id = int(site_id)
    group = await GroupService.get_group(group_id)

    parser_text = (
        "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        if group.is_active else
        "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
    )

    links_count = await ProductLink.filter(group_id = group_id).count()

    text = (
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.title}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {group.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if group.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {links_count}\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.\n"
        "üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤.\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü,"
        " —Å—Å—ã–ª–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É).\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n"
        f"{parser_text}"
        "‚è≠ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è"
    )

    excel_file = await generate_price_diff_excel(group_id)
    if not excel_file:
        await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ—Ç —Ü–µ–Ω).", show_alert = True)
        return

    await callback.message.answer_document(
        document = BufferedInputFile(excel_file.getvalue(), filename = f"–ê–Ω–∞–ª–∏–∑_–≥—Ä—É–ø–ø—ã_{group.title}.xlsx"),
        caption = f"üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –≥—Ä—É–ø–ø—ã {group_id}"
    )
    await callback.message.answer(
        text = text,
        reply_markup = group_detail_keyboard(
            group_id = group_id,
            site_id = int(site_id),
            is_parser_active = group.is_active
        )
    )
    await callback.answer()
